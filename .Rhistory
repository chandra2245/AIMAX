if(input$DateFilter_P1[1] <= min(as.Date(activitycount2$DATE))|| input$DateFilter_P1[2] <= max(as.Date(activitycount2$DATE)))
{
activitycount2 <- subset(activitycount2, activitycount2$DATE >= min(as.Date(activitycount2$DATE)) & activitycount2$DATE <= max(as.Date(activitycount2$DATE)))
}
else
{
activitycount2 <- subset(activitycount2, activitycount2$DATE >= input$DateFilter_P1[1] & activitycount2$DATE <= input$DateFilter_P1[2])
}
activitycount2 <- subset(activitycount2,select = c(DATE,EMAIL_COUNT))
activitycount2 <- na.omit(activitycount2)
activitycount_temp3 <-activitycount2%>%dplyr::arrange(DATE)
DF4<-activitycount_temp3 %>%
mutate(month = format(DATE, "%m"), year = format(DATE, "%Y")) %>%
group_by(month, year) %>%
summarise(total = sum(EMAIL_COUNT))
DF4$DATE<-dmy(paste("01",DF4$month,DF4$year, sep="-"))
output_data3<-DF4 %>%
group_by(DATE) %>%
summarise(Total = sum(total))
activitycount3 <- dbGetQuery(conn, "select * from CALL_ACTIVITY")
activitycount3$DATE <- as.Date(as.numeric(activitycount3$DATE), origin = "1899-12-30")
activitycount3$SOURCE_BRAND_NAME <- toupper(activitycount3$SOURCE_BRAND_NAME)
activitycount3 <- activitycount3[activitycount3$SOURCE_BRAND_NAME == input$Brand_P1,]
if(input$DateFilter_P1[1] <= min(as.Date(activitycount3$DATE))|| input$DateFilter_P1[2] <= max(as.Date(activitycount3$DATE)))
{
activitycount3 <- subset(activitycount3, activitycount3$DATE >= min(as.Date(activitycount3$DATE)) & activitycount3$DATE <= max(as.Date(activitycount3$DATE)))
}
else
{
activitycount3 <- subset(activitycount3, activitycount3$DATE >= input$DateFilter_P1[1] & activitycount3$DATE <= input$DateFilter_P1[2])
}
activitycount3<- subset(activitycount3,select = c(DATE,CALL_DUR))
activitycount3 <- na.omit(activitycount3)
activitycount_temp4 <-activitycount3%>%dplyr::arrange(DATE)
dbDisconnect(conn)
DF5<-activitycount_temp4 %>%
mutate(month = format(DATE, "%m"), year = format(DATE, "%Y")) %>%
group_by(month, year) %>%
summarise(total = sum(CALL_DUR))
DF5$DATE<-dmy(paste("01",DF5$month,DF5$year, sep="-"))
output_data4<-DF5 %>%
group_by(DATE) %>%
summarise(Total = sum(total))
a <- list(
title = "Display"
)
b <- list(
title = "Search"
)
c <- list(
title = "Email"
)
d<- list(
title = "Call"
)
p1 <- plot_ly(output_data1, x = ~DATE, y = ~Total, type = 'scatter', name = 'Display' , mode = 'lines+markers')%>%
layout(height = 400,showgrid = FALSE,yaxis = a)
p2 <- plot_ly(output_data2, x = ~DATE, y = ~Total, type = 'scatter', name = 'Search' , mode = 'lines+markers')%>%
layout(height = 400,showgrid = FALSE,yaxis = b)
p3 <- plot_ly(output_data3, x = ~DATE, y = ~Total, type = 'scatter', name = 'Email' , mode = 'lines+markers')%>%
layout(height = 400,showgrid = FALSE,yaxis = c)
p4 <- plot_ly(output_data4, x = ~DATE, y = ~Total, type = 'scatter', name = 'Call' , mode = 'lines+markers')%>%
layout(height = 400,showgrid = FALSE,yaxis = d)
subplot(p1, p2,p3,p4 ,nrows = 2, margin = 0.06,titleY = TRUE)
# p <- plot_ly(output_data, x = ~Brand, y = ~sum1, type = 'bar', name = 'Promo Display') %>%
#   add_trace(y = ~sum2, name = 'Promo Search') %>%
#   layout(yaxis = list(title = 'Sum'), barmode = 'stack',height = 325 ,width =200)
})
scatter_callactivity <- function(){
conn <- dbConnect(RSQLite::SQLite(), "RadiusDB.db")
call_activity <- data.frame()
call_activity <- dbGetQuery(conn, "select * from CALL_ACTIVITY")
call_activity$DATE <- as.Date(as.numeric(call_activity$DATE), origin = "1899-12-30")
call_activity$SOURCE_BRAND_NAME <- toupper(call_activity$SOURCE_BRAND_NAME)
call_activity <- call_activity[call_activity$SOURCE_BRAND_NAME == input$Brand_P1,]
if(input$DateFilter_P1[1] <= min(as.Date(call_activity$DATE))|| input$DateFilter_P1[2] <= max(as.Date(call_activity$DATE)))
{
call_activity <- subset(call_activity, call_activity$DATE >= min(as.Date(call_activity$DATE)) & call_activity$DATE <= max(as.Date(call_activity$DATE)))
}
else
{
call_activity <- subset(call_activity, call_activity$DATE >= input$DateFilter_P1[1] & call_activity$DATE <= input$DateFilter_P1[2])
}
call_activity <- subset(call_activity,select = c(CALL_DUR,DATE))
dbDisconnect(conn)
call_activity
}
output$callactivityplot <- renderPlotly({
output_data <- scatter_callactivity()
output_data_temp <-output_data%>%dplyr::arrange(DATE)
DF2<-output_data_temp %>%
mutate(month = format(DATE, "%m"), year = format(DATE, "%Y")) %>%
group_by(month, year) %>%
summarise(total = sum(CALL_DUR))
DF2$DATE<-dmy(paste("01",DF2$month,DF2$year, sep="-"))
output_data<-DF2 %>%
group_by(DATE) %>%
summarise(Total = sum(total))
plot_ly(output_data, x = ~DATE,
y = ~Total,
name = 'trace 0',
type = 'scatter',
mode = 'lines',
line = list(color = 'rgb(205, 12, 24)'))%>%
plotly::layout( height = 325)
})
investment_overview <- reactive({
conn <- dbConnect(RSQLite::SQLite(), "RadiusDB.db")
spendamount <- data.frame()
spendamount <- dbGetQuery(conn, "select * from PROMO_DISPLAY")
spendamount$DATE <- as.Date(as.numeric(spendamount$DATE), origin = "1899-12-30")
spendamount <- spendamount[spendamount$BRAND_NAME == input$Brand_P1,]
if(input$DateFilter_P1[1] <= min(as.Date(spendamount$DATE))|| input$DateFilter_P1[2] <= max(as.Date(spendamount$DATE)))
{
spendamount <- subset(spendamount, spendamount$DATE >= min(as.Date(spendamount$DATE)) & spendamount$DATE <= max(as.Date(spendamount$DATE)))
}
else
{
spendamount <- subset(spendamount, spendamount$DATE >= input$DateFilter_P1[1] & spendamount$DATE <= input$DateFilter_P1[2])
}
spendamount <- subset(spendamount,select = c(DATE,SPEND_AMT))
spendamount <- na.omit(spendamount)
spendamount_temp <-spendamount%>%dplyr::arrange(DATE)
DF2<-spendamount_temp %>%
mutate(month = format(DATE, "%m"), year = format(DATE, "%Y")) %>%
group_by(month, year) %>%
summarise(total = sum(SPEND_AMT))
DF2$DATE<-dmy(paste("01",DF2$month,DF2$year, sep="-"))
output_data<-DF2 %>%
group_by(DATE) %>%
summarise(Total = sum(total))
spendamount1 <- dbGetQuery(conn, "select * from PROMO_SEARCH")
spendamount1$DATE <- as.Date(as.numeric(spendamount1$DATE), origin = "1899-12-30")
spendamount1 <- spendamount1[spendamount1$BRAND == input$Brand_P1,]
if(input$DateFilter_P1[1] <= min(as.Date(spendamount1$DATE))|| input$DateFilter_P1[2] <= max(as.Date(spendamount1$DATE)))
{
spendamount1 <- subset(spendamount1, spendamount1$DATE >= min(as.Date(spendamount1$DATE)) & spendamount1$DATE <= max(as.Date(spendamount1$DATE)))
}
else
{
spendamount1 <- subset(spendamount1, spendamount1$DATE >= input$DateFilter_P1[1] & spendamount1$DATE <= input$DateFilter_P1[2])
}
spendamount1 <- subset(spendamount1,select = c(DATE,SPEND_AMT))
spendamount1 <- na.omit(spendamount1)
spendamount_temp1 <-spendamount1%>%dplyr::arrange(DATE)
DF3<-spendamount_temp1 %>%
mutate(month = format(DATE, "%m"), year = format(DATE, "%Y")) %>%
group_by(month, year) %>%
summarise(total = sum(SPEND_AMT))
DF3$DATE<-dmy(paste("01",DF3$month,DF3$year, sep="-"))
output_data1<-DF3 %>%
group_by(DATE) %>%
summarise(Total = sum(total))
spendamount2 <- dbGetQuery(conn, "select * from EMAIL")
spendamount2$DATE <- as.Date(as.numeric(spendamount2$DATE), origin = "1899-12-30")
spendamount2 <- spendamount2[spendamount2$DISPLAY_BRAND_NAME == input$Brand_P1,]
if(input$DateFilter_P1[1] <= min(as.Date(spendamount2$DATE))|| input$DateFilter_P1[2] <= max(as.Date(spendamount2$DATE)))
{
spendamount2 <- subset(spendamount2, spendamount2$DATE >= min(as.Date(spendamount2$DATE)) & spendamount2$DATE <= max(as.Date(spendamount2$DATE)))
}
else
{
spendamount2 <- subset(spendamount2, spendamount2$DATE >= input$DateFilter_P1[1] & spendamount2$DATE <= input$DateFilter_P1[2])
}
spendamount2 <- subset(spendamount2,select = c(DATE,EMAIL_COUNT))
spendamount2 <- na.omit(spendamount2)
spendamount_temp2 <-spendamount2%>%dplyr::arrange(DATE)
DF4<-spendamount_temp2 %>%
mutate(month = format(DATE, "%m"), year = format(DATE, "%Y")) %>%
group_by(month, year) %>%
summarise(total = sum(EMAIL_COUNT))
DF4$DATE<-dmy(paste("01",DF4$month,DF4$year, sep="-"))
output_data2<-DF4 %>%
group_by(DATE) %>%
summarise(Total = sum(total))
output_data2$Total <- output_data2$Total*0.123
spendamount3 <- dbGetQuery(conn, "select * from CALL_ACTIVITY")
spendamount3$DATE <- as.Date(as.numeric(spendamount3$DATE), origin = "1899-12-30")
spendamount3$SOURCE_BRAND_NAME <- toupper(spendamount3$SOURCE_BRAND_NAME)
spendamount3 <- spendamount3[spendamount3$SOURCE_BRAND_NAME == input$Brand_P1,]
if(input$DateFilter_P1[1] <= min(as.Date(spendamount3$DATE))|| input$DateFilter_P1[2] <= max(as.Date(spendamount3$DATE)))
{
spendamount3 <- subset(spendamount3, spendamount3$DATE >= min(as.Date(spendamount3$DATE)) & spendamount3$DATE <= max(as.Date(spendamount3$DATE)))
}
else
{
spendamount3 <- subset(spendamount3, spendamount3$DATE >= input$DateFilter_P1[1] & spendamount3$DATE <= input$DateFilter_P1[2])
}
spendamount3<- subset(spendamount3,select = c(DATE,CALL_DUR))
spendamount3 <- na.omit(spendamount3)
spendamount_temp3 <-spendamount3%>%dplyr::arrange(DATE)
dbDisconnect(conn)
DF5<-spendamount_temp3 %>%
mutate(month = format(DATE, "%m"), year = format(DATE, "%Y")) %>%
group_by(month, year) %>%
summarise(total = sum(CALL_DUR))
DF5$DATE<-dmy(paste("01",DF5$month,DF5$year, sep="-"))
output_data3<-DF5 %>%
group_by(DATE) %>%
summarise(Total = sum(total))
output_data3$Total <- output_data3$Total*0.0608
result <- rbind(output_data,output_data1)
result2<- rbind(output_data2,output_data3)
result3 <- rbind(result,result2,fill = NA)
data<-result3 %>%
mutate(month = format(DATE, "%m"), year = format(DATE, "%Y")) %>%
group_by(month, year) %>%
summarise(total = sum(Total))
data$DATE<-dmy(paste("01",data$month,data$year, sep="-"))
result_data<-data %>%
group_by(DATE) %>%
summarise(Total = sum(total))
result_data
})
output$investmentoverview <- renderPlotly({
result_data <- investment_overview()
result_data1 <- activity_overview()
result_data_temp <- result_data
result_data1_temp <- result_data1
colnames(result_data_temp) <- c("Date","Total")
colnames(result_data1_temp) <- c("Date","Total")
final_data <- cbind(result_data_temp,result_data1_temp[,2])
colnames(final_data) <- c("Date","Total Investment","Total Activity count")
write.csv(final_data,"www/investmentVSactivity.csv",row.names = F)
ay2 <- list(
tickfont = list(color = "black"),
overlaying = "y",
side = "right",
title = "Total Activity Count"
)
fig <- plot_ly()
fig <- fig %>% add_lines(x = result_data$DATE, y = result_data$Total, name = "Total Investment",title = "Total Investment")
fig <- fig %>% add_lines(x = result_data1$DATE, y = result_data1$Total, name = "Total Activity Count", yaxis = "y2")
fig <- fig %>% layout(
title = "Overview of Investment and Activity", yaxis2 = ay2,
xaxis = list(title="DATE")
)
# plot_ly(result_data, x = ~DATE,
#         y = ~Total,
#         name = 'trace 0',
#         type = 'scatter',
#         mode = 'lines')%>%
#   plotly::layout(title = "Overview of Investment", height = 400)
})
activity_overview <- reactive({
conn <- dbConnect(RSQLite::SQLite(), "RadiusDB.db")
activitycount <- data.frame()
activitycount <- dbGetQuery(conn, "select * from PROMO_DISPLAY")
activitycount$DATE <- as.Date(as.numeric(activitycount$DATE), origin = "1899-12-30")
activitycount <- activitycount[activitycount$BRAND_NAME == input$Brand_P1,]
if(input$DateFilter_P1[1] <= min(as.Date(activitycount$DATE))|| input$DateFilter_P1[2] <= max(as.Date(activitycount$DATE)))
{
activitycount <- subset(activitycount, activitycount$DATE >= min(as.Date(activitycount$DATE)) & activitycount$DATE <= max(as.Date(activitycount$DATE)))
}
else
{
activitycount <- subset(activitycount, activitycount$DATE >= input$DateFilter_P1[1] & activitycount$DATE <= input$DateFilter_P1[2])
}
activitycount <- subset(activitycount,select = c(DATE,ACTIVITY_COUNT))
activitycount <- na.omit(activitycount)
activitycount_temp1 <-activitycount%>%dplyr::arrange(DATE)
DF1<-activitycount_temp1 %>%
mutate(month = format(DATE, "%m"), year = format(DATE, "%Y")) %>%
group_by(month, year) %>%
summarise(total = sum(ACTIVITY_COUNT))
DF1$DATE<-dmy(paste("01",DF1$month,DF1$year, sep="-"))
output_data1<-DF1 %>%
group_by(DATE) %>%
summarise(Total = sum(total))
activitycount1 <- dbGetQuery(conn, "select * from PROMO_SEARCH")
activitycount1$DATE <- as.Date(as.numeric(activitycount1$DATE), origin = "1899-12-30")
activitycount1 <- activitycount1[activitycount1$BRAND == input$Brand_P1,]
if(input$DateFilter_P1[1] <= min(as.Date(activitycount1$DATE))|| input$DateFilter_P1[2] <= max(as.Date(activitycount1$DATE)))
{
activitycount1 <- subset(activitycount1, activitycount1$DATE >= min(as.Date(activitycount1$DATE)) & activitycount1$DATE <= max(as.Date(activitycount1$DATE)))
}
else
{
activitycount1 <- subset(activitycount1, activitycount1$DATE >= input$DateFilter_P1[1] & activitycount1$DATE <= input$DateFilter_P1[2])
}
activitycount1 <- subset(activitycount1,select = c(DATE,ACTIVITY_COUNT))
activitycount1 <- na.omit(activitycount1)
activitycount_temp2 <-activitycount1%>%dplyr::arrange(DATE)
DF2<-activitycount_temp2 %>%
mutate(month = format(DATE, "%m"), year = format(DATE, "%Y")) %>%
group_by(month, year) %>%
summarise(total = sum(ACTIVITY_COUNT))
DF2$DATE<-dmy(paste("01",DF2$month,DF2$year, sep="-"))
output_data2<-DF2 %>%
group_by(DATE) %>%
summarise(Total = sum(total))
activitycount2 <- dbGetQuery(conn, "select * from EMAIL")
activitycount2$DATE <- as.Date(as.numeric(activitycount2$DATE), origin = "1899-12-30")
activitycount2 <- activitycount2[activitycount2$DISPLAY_BRAND_NAME == input$Brand_P1,]
if(input$DateFilter_P1[1] <= min(as.Date(activitycount2$DATE))|| input$DateFilter_P1[2] <= max(as.Date(activitycount2$DATE)))
{
activitycount2 <- subset(activitycount2, activitycount2$DATE >= min(as.Date(activitycount2$DATE)) & activitycount2$DATE <= max(as.Date(activitycount2$DATE)))
}
else
{
activitycount2 <- subset(activitycount2, activitycount2$DATE >= input$DateFilter_P1[1] & activitycount2$DATE <= input$DateFilter_P1[2])
}
activitycount2 <- subset(activitycount2,select = c(DATE,EMAIL_COUNT))
activitycount2 <- na.omit(activitycount2)
activitycount_temp3 <-activitycount2%>%dplyr::arrange(DATE)
DF4<-activitycount_temp3 %>%
mutate(month = format(DATE, "%m"), year = format(DATE, "%Y")) %>%
group_by(month, year) %>%
summarise(total = sum(EMAIL_COUNT))
DF4$DATE<-dmy(paste("01",DF4$month,DF4$year, sep="-"))
output_data3<-DF4 %>%
group_by(DATE) %>%
summarise(Total = sum(total))
activitycount3 <- dbGetQuery(conn, "select * from CALL_ACTIVITY")
activitycount3$DATE <- as.Date(as.numeric(activitycount3$DATE), origin = "1899-12-30")
activitycount3$SOURCE_BRAND_NAME <- toupper(activitycount3$SOURCE_BRAND_NAME)
activitycount3 <- activitycount3[activitycount3$SOURCE_BRAND_NAME == input$Brand_P1,]
if(input$DateFilter_P1[1] <= min(as.Date(activitycount3$DATE))|| input$DateFilter_P1[2] <= max(as.Date(activitycount3$DATE)))
{
activitycount3 <- subset(activitycount3, activitycount3$DATE >= min(as.Date(activitycount3$DATE)) & activitycount3$DATE <= max(as.Date(activitycount3$DATE)))
}
else
{
activitycount3 <- subset(activitycount3, activitycount3$DATE >= input$DateFilter_P1[1] & activitycount3$DATE <= input$DateFilter_P1[2])
}
activitycount3<- subset(activitycount3,select = c(DATE,CALL_DUR))
activitycount3 <- na.omit(activitycount3)
activitycount_temp4 <-activitycount3%>%dplyr::arrange(DATE)
dbDisconnect(conn)
DF5<-activitycount_temp4 %>%
mutate(month = format(DATE, "%m"), year = format(DATE, "%Y")) %>%
group_by(month, year) %>%
summarise(total = sum(CALL_DUR))
DF5$DATE<-dmy(paste("01",DF5$month,DF5$year, sep="-"))
output_data4<-DF5 %>%
group_by(DATE) %>%
summarise(Total = sum(total))
result_temp <- rbind(output_data1,output_data2)
result_temp2<- rbind(output_data3,output_data4)
result <- rbind(result_temp,result_temp2,fill = NA)
data_temp<-result %>%
mutate(month = format(DATE, "%m"), year = format(DATE, "%Y")) %>%
group_by(month, year) %>%
summarise(total = sum(Total))
data_temp$DATE<-dmy(paste("01",data_temp$month,data_temp$year, sep="-"))
result_data1<-data_temp %>%
group_by(DATE) %>%
summarise(Total = sum(total))
result_data1
})
output$activityoverview <- renderPlotly({
result_data1 <- activity_overview()
plot_ly(result_data1, x = ~DATE,
y = ~Total,
name = 'trace 0',
type = 'scatter',
mode = 'lines')%>%
plotly::layout(title = "Overview of Activity",height = 400)
})
#########################################
# ROI Analysis
#########################################
ROI_data_func<-function(brand){
conn <- dbConnect(RSQLite::SQLite(), "RadiusDB.db")
ROI_data <- data.frame()
ROI_data <- dbGetQuery(conn, paste0("select * from ROI_DF where brand in('",brand,"')"))
dbDisconnect(conn)
return(ROI_data)
}
output$callROI <-renderPlotly({
data <- ROI_data_func("HUMIRA")
x <- list(
title = "Date",
zeroline = TRUE,
showline = TRUE,
showticklabels = TRUE,
showgrid = FALSE,
linecolor = toRGB("black"),
linewidth = 1
)
y <- list(
title = "ROI for Call Activity",
zeroline = TRUE,
showline = TRUE,
showticklabels = TRUE,
showgrid = FALSE,
linecolor = toRGB("black"),
linewidth = 1
)
# p <- plot_ly(data,x = ~Percentage, y = ~CUSTOMER_TYPE_DESCRIPTION , type = 'bar', orientation = 'h',height = 300)%>%
#   layout(xaxis = x, yaxis = y)
p <- data %>% plot_ly(x = ~as.character(DATE_ID), y = ~ROI_CALL,mode = 'lines+markers', type = 'scatter', height = 300,
line=list( color = "rgb(0,0,128)"),
marker=list( color = "rgb(0,0,128)"))%>%
layout(xaxis = x, yaxis = y)
})
output$emailROI <-renderPlotly({
data <- ROI_data_func(input$Brand_P1)
x <- list(
title = "Date",
zeroline = TRUE,
showline = TRUE,
showticklabels = TRUE,
showgrid = FALSE,
linecolor = toRGB("black"),
linewidth = 1
)
y <- list(
title = "ROI for Email Activity",
zeroline = TRUE,
showline = TRUE,
showticklabels = TRUE,
showgrid = FALSE,
linecolor = toRGB("black"),
linewidth = 1
)
# p <- plot_ly(data,x = ~Percentage, y = ~CUSTOMER_TYPE_DESCRIPTION , type = 'bar', orientation = 'h',height = 300)%>%
#   layout(xaxis = x, yaxis = y)
p <- data %>% plot_ly(x = ~as.character(DATE_ID), y = ~ROI_EMAIL,mode = 'lines+markers', type = 'scatter', height = 300,
line=list( color = "rgb(128,0,0)"),
marker=list( color = "rgb(128,0,0)"))%>%
layout(xaxis = x, yaxis = y)
})
output$displayROI <-renderPlotly({
data <- ROI_data_func(input$Brand_P1)
x <- list(
title = "Date",
zeroline = TRUE,
showline = TRUE,
showticklabels = TRUE,
showgrid = FALSE,
linecolor = toRGB("black"),
linewidth = 1
)
y <- list(
title = "ROI for Display Activity",
zeroline = TRUE,
showline = TRUE,
showticklabels = TRUE,
showgrid = FALSE,
linecolor = toRGB("black"),
linewidth = 1
)
# p <- plot_ly(data,x = ~Percentage, y = ~CUSTOMER_TYPE_DESCRIPTION , type = 'bar', orientation = 'h',height = 300)%>%
#   layout(xaxis = x, yaxis = y)
p <- data %>% plot_ly(x = ~as.character(DATE_ID), y = ~ROI_DISPLAY,mode = 'lines+markers', type = 'scatter', height = 300,
line=list( color = "rgb(34,139,34)"),
marker=list( color = "rgb(34,139,34)"))%>%
layout(xaxis = x, yaxis = y)
})
output$searchROI <-renderPlotly({
data <- ROI_data_func(input$Brand_P1)
x <- list(
title = "Date",
zeroline = TRUE,
showline = TRUE,
showticklabels = TRUE,
showgrid = FALSE,
linecolor = toRGB("black"),
linewidth = 1
)
y <- list(
title = "ROI for Search Activity",
zeroline = TRUE,
showline = TRUE,
showticklabels = TRUE,
showgrid = FALSE,
linecolor = toRGB("black"),
linewidth = 1
)
# p <- plot_ly(data,x = ~Percentage, y = ~CUSTOMER_TYPE_DESCRIPTION , type = 'bar', orientation = 'h',height = 300)%>%
#   layout(xaxis = x, yaxis = y)
p <- data %>% plot_ly(x = ~as.character(DATE_ID), y = ~ROI_SEARCH,mode = 'lines+markers', type = 'scatter', height = 300,
line=list( color = "rgb(139,0,139)"),
marker=list( color = "rgb(139,0,139)"))%>%
layout(xaxis = x, yaxis = y)
})
output$overallROI <-renderPlotly({
data <- ROI_data_func(input$Brand_P1)
x <- list(
title = "Date",
zeroline = TRUE,
showline = TRUE,
showticklabels = TRUE,
showgrid = FALSE,
linecolor = toRGB("black"),
linewidth = 1
)
y <- list(
title = "ROI for all Activities",
zeroline = TRUE,
showline = TRUE,
showticklabels = TRUE,
showgrid = FALSE,
linecolor = toRGB("black"),
linewidth = 1
)
call = c(11,12,51,53,51,59,87,100,92,85,55,78,70,67,84,87,78)
email = c(57,68,83,81,80,42,83,100,48,50,28,30,59,39,36,37,24)
display = c(83,97,87,96,100,87,91,92,93,95,97,96,95,95,94,100,93)
search = c(77,79,100,97,96,87,80,79,78,77,77,76,75,74,73,72,71)
ROI_df = data.frame(call, email, display, search)
# p <- plot_ly(data,x = ~Percentage, y = ~CUSTOMER_TYPE_DESCRIPTION , type = 'bar', orientation = 'h',height = 300)%>%
#   layout(xaxis = x, yaxis = y)
p <- plot_ly(data, x = ~as.character(DATE_ID), y = ~call, name = 'Call', mode = 'lines+markers', type = "scatter", height = 600)%>% add_trace(y = ~email, name = 'Email', mode = 'lines+markers')%>% add_trace(y = ~display, name = 'Display', mode = 'lines+markers')%>% add_trace(y = ~search, name = 'Search', mode = 'lines+markers')%>%
layout(xaxis = x, yaxis = y)
#, height = 600)%>%
# layout(xaxis = x, yaxis = y)
})
}
runApp()
runApp()

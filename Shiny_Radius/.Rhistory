tabItems(
tabItem(
tabName ="dashboard", class = "active",
MainPageRow1,MainPageRow2),
tabItem(tabName = "Marketing_Analysis",
MarketPageRow1,MarketPageRow2,MarketPageRow3
))
}
}
else {
loginpage
}
})
output$results <-  DT::renderDataTable({
datatable(iris, options = list(autoWidth = TRUE,
searching = FALSE))
})
}
#########################################
# Run App Function Call
#########################################
runApp(list(ui = ui, server = server), launch.browser = TRUE)
Surveillance <- data.frame(
Date = seq(as.Date("2015/1/1"), as.Date("2015/12/31"), "days"),
Disease_1 = sample(1:100,365,replace=T), Disease_2 =sample(1:100,365,replace=T))
Surveillance <- Surveillance %>% mutate(
Week = format(Date, "%Y-%m-%U"))
Surveillance
Surveillance <- data.frame()
Surveillance
Surveillance <- read.csv("Datasets\\Count_Customer_Type.csv")
Surveillance
dataset <- dataset[,c(Surveillance$Count, "Week")]
CUSTOMER_TYPE_DESCRIPTION
runApp('C:/Users/698190/Desktop/ui.R')
runApp('C:/Users/698190/Desktop/ui.R')
Surveillance <- read.csv("C:\\Users\\698190\\Documents\\Shiny_Radius\\Shiny_Radius\\Datasets\\Count_Customer_Type.csv")
Surveillance
Surveillance$Date
min(Surveillance$Date)
min(as.Date(Surveillance$Date))
runApp('C:/Users/698190/Desktop/ui.R')
Surveillance
Surveillance <- data.frame()
Surveillance <- read.csv("C:\\Users\\698190\\Documents\\Shiny_Radius\\Shiny_Radius\\Datasets\\Count_Customer_Type.csv")
Surveillance
Surveillance
Surveillance <- Surveillance[Surveillance$DISPLAY_BRAND_NAME == "CREON",]
Surveillance
dataset <- subset(Surveillance, Date >= min(as.Date(Surveillance$Date)) & Date <= max(as.Date(Surveillance$Date)))
dataset <- subset(Surveillance, Date >= min(Surveillance$Date) & Date <= max(Surveillance$Date))
Surveillance$Date <- as.Date(Surveillance$Date)
dataset <- subset(Surveillance, Date >= min(Surveillance$Date) & Date <= max(Surveillance$Date))
dataset <- dataset[,c(Surveillance$Count, "CUSTOMER_TYPE_DESCRIPTION")]
dataset <- dataset[,c(Surveillance$Count, Surveillance$CUSTOMER_TYPE_DESCRIPTION)]
dataset
dataset <- dataset[,c(Surveillance$Count, Surveillance$CUSTOMER_TYPE_DESCRIPTION)]
dataset <- data.frame(Surveillance$Count, Surveillance$CUSTOMER_TYPE_DESCRIPTION)
dataset
runApp('C:/Users/698190/Desktop/ui.R')
file_data <- read_excel(path =  "C:/Users/698190/Documents/Shiny_Radius_Temp/Shiny_Radius/Datasets/All_Data_Final.xlsx",sheet = 3)
library(readxl)
file_data <- read_excel(path =  "C:/Users/698190/Documents/Shiny_Radius_Temp/Shiny_Radius/Datasets/All_Data_Final.xlsx",sheet = 3)
file_data$DATA_DATE <- ymd(file_data$DATA_DATE)
file_data
file_data_temp <- file_data %>% mutate(month = format(DATA_DATE,"%m"), year = format(DATA_DATE, "%Y")) %>% group_by(month,year,DISPLAY_BRAND_NAME,CUSTOMER_TYPE_DESCRIPTION) %>% count(DISPLAY_BRAND_NAME)
file_data_temp$Date<-dmy(paste("01",file_data_temp$month,file_data_temp$year, sep="-"))
names(file_data_temp) [5] <- "Count"
file_data_temp
runApp('C:/Users/698190/Desktop/ui.R')
runApp('C:/Users/698190/Desktop/ui.R')
runApp('C:/Users/698190/Desktop/ui.R')
Surveillance <- Surveillance[Surveillance$DISPLAY_BRAND_NAME == "CREON",]
Surveillance <- Surveillance %>% group_by(Surveillance$CUSTOMER_TYPE_DESCRIPTION)
Surveillance
dataset <- (Surveillance$Count,Surveillance$CUSTOMER_TYPE_DESCRIPTION)
dataset <- data.frame(Surveillance$Count,Surveillance$CUSTOMER_TYPE_DESCRIPTION)
dataset
dataset <- group_by(dataset$Surveillance.CUSTOMER_TYPE_DESCRIPTION)
dataset <- group_by(Surveillance.CUSTOMER_TYPE_DESCRIPTION)
dataset <- sum(dataset$Surveillance.Count) %>% group_by(dataset$Surveillance.CUSTOMER_TYPE_DESCRIPTION)
dataset <- data.frame(dataset$Surveillance.CUSTOMER_TYPE_DESCRIPTION,dataset$Surveillance.Count)
dataset
dataset <- group_by(Surveillance.CUSTOMER_TYPE_DESCRIPTION)
dataset <- group_by(dataset$dataset.Surveillance.CUSTOMER_TYPE_DESCRIPTION)
dataset <- dataset %>% group_by(dataset$dataset.Surveillance.CUSTOMER_TYPE_DESCRIPTION)
dataset
dataset <- data.frame(dataset$Surveillance.CUSTOMER_TYPE_DESCRIPTION,dataset$Surveillance.Count)
dataset <- data.frame(Surveillance$Count,Surveillance$CUSTOMER_TYPE_DESCRIPTION)
dataset
dataset <- data.frame(Surveillance$CUSTOMER_TYPE_DESCRIPTION,Surveillance$Count,)
dataset <- data.frame(Surveillance$CUSTOMER_TYPE_DESCRIPTION,Surveillance$Count)
dataset
dataset <- dataset %>% group_by(dataset$Surveillance.CUSTOMER_TYPE_DESCRIPTION) %>% sum(dataset$Surveillance.Count)
dataset <- Surveillance$CUSTOMER_TYPE_DESCRIPTION %>% group_by(dataset$Surveillance.CUSTOMER_TYPE_DESCRIPTION) %>% sum(Surveillance$Count)
dataset <- data.frame(Surveillance$CUSTOMER_TYPE_DESCRIPTION,sum(Surveillance$Count)) %>% group_by(Surveillance$CUSTOMER_TYPE_DESCRIPTION)
dataset
dataset <- data.frame(Surveillance$CUSTOMER_TYPE_DESCRIPTION,sum(Surveillance$Count))
dataset
dataset <- data.frame(Surveillance$CUSTOMER_TYPE_DESCRIPTION,Surveillance$Count))
dataset <- data.frame(Surveillance$CUSTOMER_TYPE_DESCRIPTION,Surveillance$Count)
dataset
colnames(dataset)
install.packages("readxl")
library(readxl)
file_data <- read_excel(path =  "C:/Users/698190/Documents/Shiny_Radius_Temp/Shiny_Radius/Datasets/All_Data_Final.xlsx",sheet = 3)
file_data$DATA_DATE <- ymd(file_data$DATA_DATE)
file_data_temp <- file_data %>% mutate(month = format(DATA_DATE,"%m"), year = format(DATA_DATE, "%Y")) %>% group_by(month,year,DISPLAY_BRAND_NAME,CUSTOMER_TYPE_DESCRIPTION) %>% count(DISPLAY_BRAND_NAME)
file_data_temp$Date<-dmy(paste("01",file_data_temp$month,file_data_temp$year, sep="-"))
names(file_data_temp) [5] <- "Count"
file_data_temp1 <- subset(file_data_temp, select = c(DISPLAY_BRAND_NAME,CUSTOMER_TYPE_DESCRIPTION,Count,Date))
write.csv(file_data_temp1, file = "Datasets\\Count_Customer_Type.csv",row.names = FALSE)
install.packages("readxl")
library(readxl)
file_data <- read_excel(path =  "C:/Users/698190/Documents/Shiny_Radius_Temp/Shiny_Radius/Datasets/All_Data_Final.xlsx",sheet = 3)
file_data$DATA_DATE <- ymd(file_data$DATA_DATE)
file_data_temp <- file_data %>% mutate(month = format(DATA_DATE,"%m"), year = format(DATA_DATE, "%Y")) %>% group_by(month,year,DISPLAY_BRAND_NAME,CUSTOMER_TYPE_DESCRIPTION) %>% count(DISPLAY_BRAND_NAME)
file_data_temp$Date<-dmy(paste("01",file_data_temp$month,file_data_temp$year, sep="-"))
names(file_data_temp) [5] <- "Count"
file_data_temp1 <- subset(file_data_temp, select = c(DISPLAY_BRAND_NAME,CUSTOMER_TYPE_DESCRIPTION,Count,Date))
write.csv(file_data_temp1, file = "Datasets\\Count_Customer_Type.csv",row.names = FALSE)
file_data_temp <- file_data %>% mutate(month = format(DATA_DATE,"%m"), year = format(DATA_DATE, "%Y")) %>% group_by(month,year,DISPLAY_BRAND_NAME,CUSTOMER_TYPE_DESCRIPTION) %>% count(DISPLAY_BRAND_NAME)
library(shiny); runApp('C:/Users/698190/Desktop/ui.R')
runApp('C:/Users/698190/Desktop/ui.R')
runApp('C:/Users/698190/Desktop/ui.R')
runApp('C:/Users/698190/Desktop/ui.R')
runApp('C:/Users/698190/Desktop/ui.R')
runApp('C:/Users/698190/Desktop/ui.R')
runApp('C:/Users/698190/Desktop/ui.R')
dataset$Surveillance.CUSTOMER_TYPE_DESCRIPTION
dataset <- aggregate(Surveillance$Count,by=list(CUSTOMER_TYPE_DESCRIPTION=Surveillance$CUSTOMER_TYPE_DESCRIPTION),FUN=sum)
dataset$Surveillance.CUSTOMER_TYPE_DESCRIPTION
dataset
runApp('C:/Users/698190/Desktop/ui.R')
colnames(dataset)
colnames(dataset)[2]
colnames(dataset)[2] <- Count
colnames(dataset)[2] <- "Count"
dataset
runApp('C:/Users/698190/Desktop/ui.R')
dataset
runApp('C:/Users/698190/Desktop/ui.R')
runApp('C:/Users/698190/Desktop/ui.R')
runApp('C:/Users/698190/Desktop/ui.R')
runApp('C:/Users/698190/Desktop/ui.R')
Surveillance <- read.csv("C:\\Users\\698190\\Documents\\Shiny_Radius\\Shiny_Radius\\Datasets\\Count_Customer_Type.csv")
Surveillance
runApp('C:/Users/698190/Desktop/ui.R')
runApp('C:/Users/698190/Desktop/ui.R')
Surveillance
Surveillance <- Surveillance[Surveillance$DISPLAY_BRAND_NAME == "CREON",]
Surveillance
dataset <- data.frame(Surveillance$CUSTOMER_TYPE_DESCRIPTION,Surveillance$Count)
dataset <- aggregate(dataset$Surveillance.Count,by=list(CUSTOMER_TYPE_DESCRIPTION=Surveillance$CUSTOMER_TYPE_DESCRIPTION),FUN=sum)
dataset
runApp('C:/Users/698190/Desktop/ui.R')
runApp('C:/Users/698190/Desktop/ui.R')
runApp('C:/Users/698190/Desktop/ui.R')
runApp('C:/Users/698190/Desktop/ui.R')
runApp('C:/Users/698190/Desktop/ui.R')
library(readxl)
file_data <- read_excel(path =  "C:/Users/698190/Documents/Shiny_Radius_Temp/Shiny_Radius/Datasets/All_Data_Final.xlsx",sheet = 3)
file_data$DATA_DATE <- ymd(file_data$DATA_DATE)
file_data_temp <- file_data %>% mutate(month = format(DATA_DATE,"%m"), year = format(DATA_DATE, "%Y")) %>% group_by(month,year,DISPLAY_BRAND_NAME,CUSTOMER_TYPE_DESCRIPTION) %>% count(DISPLAY_BRAND_NAME)
file_data_temp$Date<-dmy(paste("01",file_data_temp$month,file_data_temp$year, sep="-"))
names(file_data_temp) [5] <- "Count"
file_data_temp1 <- subset(file_data_temp, select = c(DISPLAY_BRAND_NAME,CUSTOMER_TYPE_DESCRIPTION,Count,Date))
write.csv(file_data_temp1, file = "Datasets\\Count_Customer_Type.csv",row.names = FALSE)
runApp('C:/Users/698190/Desktop/ui.R')
Surveillance
dataset
runApp('C:/Users/698190/Desktop/ui.R')
dataset <- data.frame(Surveillance$CUSTOMER_TYPE_DESCRIPTION,Surveillance$Count)
dataset <- aggregate(dataset$x,by=list(CUSTOMER_TYPE_DESCRIPTION=dataset$CUSTOMER_TYPE_DESCRIPTION),FUN=sum)
dataset
runApp('C:/Users/698190/Desktop/ui.R')
runApp('C:/Users/698190/Desktop/ui.R')
dataset
runApp('C:/Users/698190/Desktop/ui.R')
dataset <- data.frame(Surveillance$CUSTOMER_TYPE_DESCRIPTION,Surveillance$Count)
dataset <- aggregate(dataset$Surveillance.Count,by=list(CUSTOMER_TYPE_DESCRIPTION=dataset$Surveillance.CUSTOMER_TYPE_DESCRIPTION),FUN=sum)
dataset
runApp('C:/Users/698190/Desktop/ui.R')
runApp('C:/Users/698190/Desktop/ui.R')
dataset
runApp('C:/Users/698190/Desktop/ui.R')
runApp('C:/Users/698190/Desktop/ui.R')
runApp('C:/Users/698190/Desktop/ui.R')
runApp('C:/Users/698190/Desktop/ui.R')
#########################################
#Importing the required libraries required
#########################################
#Shiny libraries
library(shiny)
library(shinydashboard)
library(shinyjs)
#It creates an HTML widget to display R data objects with DataTables
library(DT)
#User password encryption and decryption library
library(sodium)
#SQLite Database interface library
library(RSQLite)
#Date function libraries
library(lubridate)
library(plotly)
#########################################
# Setting the Working Directory
#########################################
# setwd("D:\\Shiny_Radius\\")
#########################################
# Setting the Database Connection
#########################################
conn <- dbConnect(RSQLite::SQLite(), "RadiusDB.db")
#########################################
# Main login screen
#########################################
loginpage <- div(id = "loginpage", style = "width: 500px; max-width: 100%; margin: 0 auto; padding: 20px;",
img(src='www\\background2.PNG',style="
width: 70%;
display: block;
margin-left: auto;
margin-right: auto;"),
wellPanel(
tags$h2("LOG IN", class = "text-center", style = "padding-top: 0;color:#333; font-weight:600;"),
textInput("userName", placeholder="Username", label = tagList(icon("user"), "Username")),
passwordInput("passwd", placeholder="Password", label = tagList(icon("unlock-alt"), "Password")),
br(),
div(
style = "text-align: center;",
actionButton("login", "SIGN IN", style = "color: white; background-color:#3c8dbc;
padding: 10px 15px; width: 150px; cursor: pointer;
font-size: 18px; font-weight: 600;"),
shinyjs::hidden(
div(id = "nomatch",
tags$p("Oops! Incorrect username or password!",
style = "color: red; font-weight: 600;
padding-top: 5px;font-size:16px;",
class = "text-center")))
))
)
#########################################
# Application Navbar
#########################################
header <- dashboardHeader( title = "Radius 2.0",
#uiOutput("loggedinuser") ,
uiOutput("logoutbtn"))
#########################################
# Application Sidebar
#########################################
sidebar <- dashboardSidebar(uiOutput("sidebarpanel"),collapsed = T)
#########################################
# Application Body
#########################################
body <- dashboardBody(tags$head(tags$link(rel = "stylesheet", type = "text/css", href = "bootstrap.css")),shinyjs::useShinyjs(), uiOutput("body"))
#########################################
# Main Page Static Body
#########################################
MainPageRow1 <- fluidRow(
box(
h3("Sales"),
plotlyOutput("salesplot"),
width = 4,height = 400,status = "info"
)
,box(
h3("Promotion"),actionButton("button", "GET DETAILED MARKETING  ANALYSIS"),
width = 8,height = 400,background = 'blue'
)
)
MainPageRow2 <- fluidRow(
box(
h3("ROI Analysis"),
width = 3,height = 400,background = 'purple'
)
,box(
h3("Marketing Mix"),
width = 9,height = 400,background = 'orange'
)
)
#########################################
# Marketing Analysis Body
#########################################
MarketPageRow1 <- fluidRow(
box(
h3("Geography Wise Marketing Activity"),
width = 4,height = 300,background = 'teal',textOutput("SliderText")
)
,box(
h3("Channel wise Marketing Activity"),
width = 4,height = 300,background = 'red'
)  ,box(
h3("Franchise Marketing Activity"),
width = 4,height = 300,background = 'lime'
)
)
MarketPageRow2 <- fluidRow(style="padding-top:5px;",align="center",
box(
column(6,h3("TRADITIONAL MEDIA MARKETING")),
column(6,h3("DIGITAL MEDIA")),
width = 12,height = 75,background = 'yellow'
)
)
MarketPageRow3 <- fluidRow(
box(
column(3,
h3("Region wise Call Activity")),
width = 3,height = 350,background = 'red'
),
box(width = 9,height = 350,background = 'green',
column(9,
plotOutput("countplot")
)
)
)
#########################################
# UI Function Call
#########################################
ui <- dashboardPage(header, sidebar, body, skin = "green")
#########################################
# File Used in the Sales Summary
#########################################
monthStart <- function(x) {
x <- as.POSIXlt(x)
x$mday <- 1
as.Date(x)
}
Sales_Summarized<-read.csv("Datasets\\Sales_Summarized.csv")
Sales_Summarized$Date=ymd(Sales_Summarized$Date)
Customer_Count <- read.csv("Datasets\\Count_Customer_Type.csv")
Customer_Count$Date <- ymd(Customer_Count$Date)
#########################################
# Server for Conditional Computation
#########################################
server <- function(input, output, session) {
#Importing User Table from the database
credentials  =  dbGetQuery(conn, "SELECT * FROM USER")
#User Authentication
login = FALSE
USER <- reactiveValues(login = login)
rv = reactiveValues()
rv$Sales_Summarized=Sales_Summarized
rv1 = reactiveValues()
rv$Customer_Count=Customer_Count
#
observe({
rv$Sales_Summarized <- Sales_Summarized[Sales_Summarized$Brand == input$Brand_P1,]
updateSliderInput(session,"DateFilter_P1",min = min(rv$Sales_Summarized$Date),
max = max(rv$Sales_Summarized$Date),
value=c(min(rv$Sales_Summarized$Date),max(rv$Sales_Summarized$Date)),timeFormat="%b %Y")
})
observe({
rv1$Customer_Count <- Customer_Count[Customer_Count$DISPLAY_BRAND_NAME == input$Brand_P1,]
updateSliderInput(session,"DateFilter_P1",min = min(rv1$Customer_Count$Date),
max = max(rv1$Customer_Count$Date),
value=c(min(rv1$Customer_Count$Date),max(rv1$Customer_Count$Date)),timeFormat="%b %Y")
})
output$salesplot <- renderPlotly({
DF3<-rv$Sales_Summarized%>%dplyr::filter(Date>=input$DateFilter_P1[1])%>%dplyr::filter(Date<=input$DateFilter_P1[2])%>%dplyr::arrange(Date)
DF3$Monthly_Growth<-0
for(i in seq(2,nrow(DF3))){
DF3$Monthly_Growth<-((DF3$Monthly_Growth[i]-DF3$Monthly_Growth[i-1])/DF3$Monthly_Growth[i-1])*100
}
plotly::plot_ly(DF3, x = ~Date,
y = ~total,
name = 'trace 0',
type = 'scatter',
mode = 'lines')%>%
plotly::layout( height = 325)
})
observeEvent(input$button, {
updateTabItems(session, "tabs", "Marketing_Analysis")
})
CustomerdataInput<-reactive({
dataset <- subset(Customer_Count, Date >= input$DateFilter_P1[1] & Date <= input$DateFilter_P1[2])
dataset <- dataset[,c("CUSTOMER_TYPE_DESCRIPTION",Customer_Count$Count)]
# dataset <- aggregate(dataset$,by=list(CUSTOMER_TYPE_DESCRIPTION=dataset$Surveillance.CUSTOMER_TYPE_DESCRIPTION),FUN=sum)
print(dataset)
dataset
})
output$countplot <-renderPlot({
ggplot(data=CustomerdataInput(), aes_string(x="CUSTOMER_TYPE_DESCRIPTION",y=Customer_Count$Count))  +
stat_summary(fun.y = sum, geom = "bar",colour="white",fill="green") +
geom_bar(stat="identity") +
labs(title=input$Brand_P1, y ="Count") +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5))
})
observe({
if (USER$login == FALSE) {
if (!is.null(input$login)) {
if (input$login > 0) {
Username <- isolate(input$userName)
Password <- isolate(input$passwd)
if(length(which(credentials$username==Username))==1) {
pasmatch  <- credentials["password"][which(credentials$username==Username),]
pasverify <- password_verify(pasmatch, Password)
if(pasverify) {
USER$login <- TRUE
}
else {
shinyjs::toggle(id = "nomatch", anim = TRUE, time = 1, animType = "fade")
shinyjs::delay(3000, shinyjs::toggle(id = "nomatch", anim = TRUE, time = 1, animType = "fade"))
}
}
else {
shinyjs::toggle(id = "nomatch", anim = TRUE, time = 1, animType = "fade")
shinyjs::delay(3000, shinyjs::toggle(id = "nomatch", anim = TRUE, time = 1, animType = "fade"))
}
}
}
}
})
#Displaying Logged in User to Navbar
#output$loggedinuser<-renderUI({
#
#  req(USER$login)
#  tags$h2(input$userName,
#         class = "dropdown",
#          style = "background-color: #eee !important; border: 0;
#          font-weight: bold; margin:5px; padding: 10px;")
#  })
#Logout Button
output$logoutbtn <- renderUI({
req(USER$login)
tags$div(a(icon("fa fa-sign-out"), "Logout",
href="javascript:window.location.reload(true)"),
class = "dropdown",
style = "background-color: #eee !important; border: 0;
font-weight: bold; margin:5px; padding: 10px;")
})
#Sidebar Panel dynamic according to the logged in user
output$sidebarpanel <- renderUI({
if (USER$login == TRUE ){
#If the logged in user is advanced then File upload option is also displayed
if (credentials[,"user_type"][which(credentials$username==input$userName)]=="advanced") {
sidebarMenu(id="tabs",
menuItem("File Upload", tabName = "FileUpload", icon = icon("th")),
menuItem("Main Page", tabName = "dashboard", icon = icon("dashboard")),
shinyjs::hidden(menuItem("Market Analysis", tabName = "Marketing_Analysis", icon = icon("dashboard"))),
menuItem("Brand Filter",selectInput(inputId = "Brand_P1", label = "Select Brand",
choices = list("MAVYRET" = "MAVYRET", "HUMIRA" = "HUMIRA",
"LUPRON DEPOT" = "LUPRON DEPOT","CREON"="CREON"), selected = "HUMIRA")),
menuItem("Date Filter",sliderInput("DateFilter_P1",
label= tags$b(h4("Filter Date")),
width='100%',
step=31,
min = as.Date("2016-01-01","%Y-%m-%d"),
max = as.Date("2016-12-01","%Y-%m-%d"),
value=c(as.Date("2016-01-01"),as.Date("2016-12-01")),
timeFormat="%b %Y"))
)
}
else{
sidebarMenu(id="tabs",
menuItem("Main Page", tabName = "dashboard", icon = icon("dashboard")),
shinyjs::hidden(menuItem("Market Analysis", tabName = "Marketing_Analysis", icon = icon("dashboard"))),
menuItem("Brand Filter",selectInput(inputId = "Brand_P1", label = "Select Brand",
choices = list("MAVYRET" = "MAVYRET", "HUMIRA" = "HUMIRA",
"LUPRON DEPOT" = "LUPRON DEPOT","CREON"="CREON"), selected = "HUMIRA")),
menuItem("Date Filter",sliderInput("DateFilter_P1",
label= tags$b(h4("Filter Date")),
width='100%',
step=31,
min = as.Date("2016-01-01","%Y-%m-%d"),
max = as.Date("2016-12-01","%Y-%m-%d"),
value=c(as.Date("2016-01-01"),as.Date("2016-12-01")),
timeFormat="%b %Y"))
)
}
}
})
#Bodu Panel dynamic according to the logged in user
output$body <- renderUI({
if (USER$login == TRUE ) {
#If the logged in user is advanced then File upload option is also displayed
if (credentials[,"user_type"][which(credentials$username==input$userName)]=="advanced") {
tabItems(
tabItem(
tabName ="FileUpload", class = "active",
h2("This is file Upload Page")
),
tabItem(
tabName ="dashboard",
MainPageRow1,MainPageRow2),
tabItem(tabName = "Marketing_Analysis",
MarketPageRow1,MarketPageRow2,MarketPageRow3
)
)
}
else {
tabItems(
tabItem(
tabName ="dashboard", class = "active",
MainPageRow1,MainPageRow2),
tabItem(tabName = "Marketing_Analysis",
MarketPageRow1,MarketPageRow2,MarketPageRow3
))
}
}
else {
loginpage
}
})
output$results <-  DT::renderDataTable({
datatable(iris, options = list(autoWidth = TRUE,
searching = FALSE))
})
}
#########################################
# Run App Function Call
#########################################
runApp(list(ui = ui, server = server), launch.browser = TRUE)
dataset
